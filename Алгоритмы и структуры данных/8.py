from time import time # Импорт времени


# сравнивает заданную строку с найденной из первой строки
def iter_2(s1, c1, c2, c3, swh_1, swh_2):
    s2 = "" # объявление второй строки
    if c3 == 0: # если с3 равно нулю(то есть в не содержит знака ?)
        try: # Пытаемся
            help_iter_for_2(s1, s2, c1, c2) # вызвать вспомогательную функцию
        except IndexError:
            return print("No") # И возвращается No
        if not swh_1: # если первый переключатель равен False
            iter_1(len(s1)) # то вызываем функцию
        else:
            return print("Yes")
    else: # Если же c3 > 0
        c1 += 1 # то увеличиваем координаты на единицу
        c2 += 1
        try: # Пытаемся
            if not swh_2: # если второй переключатель не равен True
                for i in range(c1, c2): # то для каждого в каординатах, из списка 1
                    s2 += str_1[i] # прибавляем в список 2
                if s1 == s2: # Если списки равны
                    if swh_1: # если первый перелючаель равен True
                        print("Yes") # то выводим yes
                    else:
                        iter_1(len(s1) + c3 - 2, sw_2=False) # Иначе продолжаем итерацию с строки 2
                else: # Если же строки не равны,
                    return print("No") # то выводим No
            else: # Если же второй переключатель равен True
                help_iter_for_2(s1, s2, c1, c2) # то запускаем вспомогательную функцию
                if not swh_1: # Если первый переключаель равен False
                    iter_1(len(s1) + c3 - 2) # то продолжаем итерацию второй строки
                else: # Иначе
                    return print("Yes") # выводим Yes

        except IndexError: # Если возникла ошибка с индексами списка
            return print("No") # Выводим No


# Вспомогательная функция,
# которая ищет в первой строке заданную строку, по заданному отрезку(с1, с2)
def help_iter_for_2(s1, s2, c1, c2):
    while True: # пока не найдёт строку
        if s1 != s2:
            s2 = ""
            for i in range(c1, c2):
                s2 += str_1[i]
            c1 += 1 # каординаты отрезков
            c2 += 1 # будут увеличиватся на 1
        if s1 == s2: # если первая строка равна второй
            return s2 # то возвращаем найденную строку
    # Если не найдена, то возбуждается ошибка


def iter_1(count, c1=0, c2=0, sw_1=False, sw_2=False):
    s1 = ""
    for i in range(count, len(str_2)): # Для каждого в отрезке от последнего использованного символа до конца строки
        if str_2[i] == "*" or str_2[i] == "?": # Если символ равен * или ?
            if s1 != "": # Если список не пуст
                if not sw_2: # И не включает в себя *
                    iter_2(s1, i - len(s1), i, c1, sw_1, sw_2) # то передаём ей строгие знаечения(только для ?)
                else:
                    iter_2(s1, i - len(s1) - c2, i - c2, c1, sw_1, sw_2) # иначе передаём ей относительные значения
            if str_2[i] == "?": # так же если символ равна ?
                c1 += 1 # то прибовляем его в счётчик
            if str_2[i] == "*": # так же если символ равен *
                c2 += 1 # то прибавляем его в другой счетчик, который предназначен для относительного пути
                sw_2 = True # переключаем второй переключатель
            if s1 != "": # если строка не пуста
                return # то прерываем функцию
        else: # Иначе
            try: # пытаемся
                s1 += str_2[i] # Прибавляем в первую строку символ, для последующего сравнения с другим
                a = str_2[i+1] # Пытаемся вызвать последующий символ в списке
            except IndexError: # Если не получается, то мы ожидаем это
                sw_1 = True # Переключаем последний переключаель, который отвечает за последнюю строку
                if not sw_2: # Если второй переключатель не переключён
                    return iter_2(s1, i - len(s1), i, c1, sw_1, sw_2) # то задаём строгие значения
                else: # Иначе
                    return iter_2(s1, i - len(s1) - c2, i - c2, c1, sw_1, sw_2) # Задаём относительные значения


# Опрос пользователя
def request_user():
    s_1 = input()
    s_2 = input()
    return [s_1, s_2]


#Запус функции, и подсчёт времени
if __name__ == '__main__':
    r_u = request_user() # запуск опроса пользователя
    str_1, str_2 = list(r_u[0]), list(r_u[1]) # пристаивание и превращение в список переменных
    t1 = time() # Время перед запуском функции
    iter_1(0) # Запуск функции
    print("Время = {}".format(time() - t1)) # Вывод времени работы функции
